/*
Copyright (c) 2020, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute, execute,
and transmit the Software, and to prepare derivative works of the Software,
and to permit third-parties to whom the Software is furnished to do so, all
subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer, must
be included in all copies of the Software, in whole or in part, and all
derivative works of the Software, unless such copies or derivative works are
solely in the form of machine-executable object code generated by a source
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
 */

#include <stdio.h>

#include <feral/stdtypes.h>
#include <feral/feralstatus.h>

#ifndef _FERAL_X86_TESTS_
#define _FERAL_X86_TESTS_

#if defined(__x86_64__) || defined(__i386__)

void x86_io_stall();
BYTE x86inb(WORD port);
WORD x86inw(WORD port);
DWORD x86inl(WORD port);
VOID x86outb(WORD port, BYTE val);
VOID x86outw(WORD port, WORD val);
VOID x86outl(WORD port, DWORD val);
UINT64 x86_read_cr3();
VOID VgaAutoEntry(UINT16 foreground, UINT16 background, CHAR letter);
VOID VgaPutChar(CHAR letter);
VOID VgaAutoPrint(UINT16 Foreground, UINT16 Background, CHAR *String);
VOID VgaAutoPrintln(UINT16 Foreground, UINT16 Background, CHAR *String);
VOID KiBlankVgaScreen(UINT32 Height, UINT32 Width, UINT32 Color);
VOID VgaSetCursorEnabled(BOOL value);
VOID VgaTraceCharacters(BOOL value);
VOID VgaMoveCursor(UINT32 PosX, UINT32 PosY);
VOID KiStartupMachineDependent(VOID);
VOID VgaSetCurrentPosition(UINT16 X, UINT16 Y);
VOID VgaGetCurrentPosition(UINT16 *X, UINT16 *Y);
VOID VgaGetFramebufferDimensions(UINT16 *Width, UINT16 *Height);
UINT32 cpuid_vendor_func();
UINT32 cpuid_brand_name();
UINT32 cpuid_family_number();
VOID VgaPrepareEnvironment();
VOID KiRestoreInterrupts(BOOL Value);
VOID *get_initial_p4_table();
VOID x86_write_cr3(UINT64 cr3);


VOID KiStartupProcessorMachineDependent(UINT32 Core);

VOID KiStartupProcessorMachineDependent(UINT32 Core)
{
}


/* hack to deal with arch-specific stuff */
void x86_io_stall()
{
	volatile int i = 0;
	volatile int b = 1;
	i = i + b;
	return;
}

BYTE x86inb(WORD port)
{
	UINT8 RetVal = 0;
	return RetVal;
}

WORD x86inw(WORD port)
{
	UINT16 RetVal = 0;
	return RetVal;
}

DWORD x86inl(WORD port)
{
	UINT32 RetVal = 0;
	return RetVal;
}

VOID x86outb(WORD port, BYTE val)
{
}

VOID x86outw(WORD port, WORD val)
{
}

VOID x86outl(WORD port, DWORD val)
{
}

UINT64 x86_read_cr3()
{
	return 0;
}

VOID VgaAutoEntry(UINT16 foreground, UINT16 background, CHAR letter)
{
	printf("%c", letter);
}

VOID VgaPutChar(CHAR letter)
{
	printf("%c", letter);
}

VOID VgaAutoPrint(UINT16 Foreground, UINT16 Background, CHAR *String)
{
	printf("%s", String);
}

VOID VgaAutoPrintln(UINT16 Foreground, UINT16 Background, CHAR *String)
{
	printf("%s\n", String);
}

VOID KiBlankVgaScreen(UINT32 Height, UINT32 Width, UINT32 Color)
{
}

VOID VgaSetCursorEnabled(BOOL value)
{
}

VOID VgaTraceCharacters(BOOL value)
{
}

VOID VgaMoveCursor(UINT32 PosX, UINT32 PosY)
{
}

VOID KiStartupMachineDependent(VOID)
{
}

VOID VgaSetCurrentPosition(UINT16 X, UINT16 Y)
{
}

VOID VgaGetCurrentPosition(UINT16 *X, UINT16 *Y)
{
}

VOID VgaGetFramebufferDimensions(UINT16 *Width, UINT16 *Height)
{
}

UINT32 cpuid_vendor_func()
{
	return 0;
}

UINT32 cpuid_brand_name()
{
	return 0;
}

UINT32 cpuid_family_number()
{
	return 0;
}

VOID VgaPrepareEnvironment()
{
}


VOID KiRestoreInterrupts(BOOL Value)
{
}

VOID *get_initial_p4_table()
{
	return NULLPTR;
}

VOID VgaPrintln(
	UINT16 foreground, UINT16 background, STRING string, DWORD length)
{
	printf("%s\n", string);
}

VOID x86_write_cr3(UINT64 cr3)
{
	volatile UINT64 Copy = cr3;
	Copy += 1;
	Copy -= 1;
}
#endif

#endif
