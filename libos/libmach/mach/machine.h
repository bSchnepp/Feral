/*
Copyright (c) 2018, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */

#ifndef _MACH_MACH_MACHINE_H_
#define _MACH_MACH_MACHINE_H_

#include <mach/machine/vm_types.h>
#include <mach/boolean.h>

struct machine_info
{
	integer_t major_version;
	integer_t minor_version;
	integer_t max_cpus;
	integer_t avail_cpus;
	vm_size_t memory_size;
};

typedef struct machine_info* machine_info_t;	// Define the machine_info pointer type.
typedef struct machine_info  machine_info_data_t;	// Some Mach stuff wants this.

#define	CPU_ARCH_MASK	0xFF000000		// Mask for architecture bits
#define CPU_ARCH_ABI64	0x01000000		// For 64-bit ABI (necessary for compatibility)

#define CPU_STATE_USER (0)
#define CPU_STATE_SYSTEM (1)
#define CPU_STATE_IDLE (2)
#define CPU_TYPE_MAX (3)

/* Mach describes CPUs in terms of integers. */
typedef integer_t cpu_type_t;
typedef integer_t cpu_subtype_t;

struct machine_slot
{
	integer_t is_cpu;
	cpu_type_t cpu_type;
	cpu_subtype_t cpu_subtype;
	integer_t running;
	integer_t cpu_ticks[CPU_STATE_MAX];
	integer_t clock_freq; 
};

typedef struct machine_slot* machine_slot_t;	// Define the machine_info pointer type.
typedef struct machine_slot  machine_slot_data_t;	// Some Mach stuff wants this.

#define CPU_TYPE_ANY ((cpu_type_t)-1)
#define CPU_TYPE_VAX ((cpu-type_t)1)
#define CPU_TYPE_ROMP (cpu_type_t)2)
#define CPU_TYPE_MC68020 ((cpu_type_t)3)
#define CPU_TYPE_NS32032 ((cpu_type_t)4)
#define CPU_TYPE_NS32332 ((cpu_type_t)5)
#define CPU_TYPE_MC680x0 ((cpu_type_t)6)
#define CPU_TYPE_I386 ((cpu_type_t)7)
	#define CPU_TYPE_X86 CPU_TYPE_I386
#define CPU_TYPE_X86_64 ((CPU_TYPE_I386) | (CPU_ARCH_ABI64))
#define CPU_TYPE_MIPS ((cpu_type_t)8)
#define CPU_TYPE_MC68030 ((cpu_type_t)9)
#define CPU_TYPE_MC98000 ((cpu_type_t)10)
#define CPU_TYPE_PA_RISC ((cpu_type_t)11)
	#define CPU_TYPE_HPPA CPU_TYPE_PA_RISC
#define CPU_TYPE_ARM ((cpu_type_t)12)
	#define CPU_TYPE_AARCH32 CPU_TYPE_ARM
#define CPU_TYPE_ARM64 ((CPU_TYPE_ARM64) | (CPU_ARCH_ABI64))
	#define CPU_TYPE_AARCH64 CPU_TYPE_ARM64
#define CPU_TYPE_MC88000 ((cpu_type_t)13)
#define CPU_TYPE_SPARC ((cpu_type_t)14)
#define CPU_TYPE_I860 ((cpu_type_t)15)
#define CPU_TYPE_ALPHA ((cpu_type_t)16)
// No Mach fork defines this (17)
#define CPU_TYPE_POWERPC ((cpu_type_t)18)
#define CPU_TYPE_POWERPC64 ((CPU_TYPE_POWERPC) | (CPU_ARCH_ABI64))




#endif
