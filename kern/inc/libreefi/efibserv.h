/*
Copyright (c) 2018, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */

#ifndef _LIBRE_EFI_EFI_BOOT_SERVICES_H_
#define _LIBRE_EFI_EFI_BOOT_SERVICES_H_

#include <libreefi/efistatus.h>
#include <libreefi/eficommon.h>

typedef struct
{
	UINT8 Type;
	UINT8 SubType;
	UINT8 Length[2];
} EFI_DEVICE_PATH_PROTOCOL;

typedef enum
{
	AllHandles,
	ByRegisterNotify,
	ByProtocol,
} EFI_LOCATE_SEARCH_TYPE;

typedef struct
{
	EFI_HANDLE AgentHandle;
	EFI_HANDLE ControllerHandle;
	UINT32 Attributes;
	UINT32 OpenCount;
} EFI_OPEN_PROTOCOL_INFORMATION_ENTRY;

typedef VOID(EFIAPI* EFI_EVENT_NOTIFY)(IN EFI_EVENT Event, IN VOID* Context);

typedef EFI_TPL(EFIAPI* EFI_RAISE_TPL)(EFI_TPL NewTpl);
typedef VOID(EFIAPI* EFI_RESTORE_TPL)(EFI_TPL OldTpl);
typedef EFI_STATUS(EFIAPI* EFI_ALLOCATE_PAGES)(IN EFI_ALLOCATE_TYPE Type, IN EFI_MEMORY_TYPE MemoryType, IN UINTN Pages, INOUT EFI_PHYSICAL_ADDRESS* Memory);
typedef EFI_STATUS(EFIAPI* EFI_FREE_PAGES)(IN EFI_PHYSICAL_ADDRESS Memory, IN UINTN Pages);
typedef EFI_STATUS(EFIAPI* EFI_GET_MEMORY_MAP)(INOUT UINTN* MemoryMapSize, INOUT EFI_MEMORY_DESCRIPTOR* MemoryMap, OUT UINTN* MapKey, OUT UINTN* DescriptorSize, OUT UINT32* DescriptorVersion);
typedef EFI_STATUS(EFIAPI* EFI_ALLOCATE_POOL)(IN EFI_MEMORY_TYPE PoolType, IN UINTN Size, OUT VOID** Buffer);
typedef EFI_STATUS(EFIAPI* EFI_FREE_POOL)(IN VOID* BUFFER);
typedef EFI_STATUS(EFIAPI* EFI_CREATE_EVENT)(UINT32 Type, EFI_TPL NotifyTpl, EFI_EVENT_NOTIFY NotifyFunction, VOID* NotifyContext, EFI_EVENT* Event);
typedef EFI_STATUS(EFIAPI* EFI_SET_TIMER)(EFI_EVENT Event, EFI_TIMER_DELAY Type, UINT64 TriggerTime);
typedef EFI_STATUS(EFIAPI* EFI_WAIT_FOR_EVENT)(UINTN NumberOfEvents, EFI_EVENT* Event, UINTN* Index);
typedef EFI_STATUS(EFIAPI* EFI_SIGNAL_EVENT)(EFI_EVENT Event);
typedef EFI_STATUS(EFIAPI* EFI_CLOSE_EVENT)(EFI_EVENT Event);
typedef EFI_STATUS(EFIAPI* EFI_CHECK_EVENT)(EFI_EVENT Event);
typedef EFI_STATUS(EFIAPI* EFI_INSTALL_PROTOCOL_INTERFACE)(INOUT EFI_HANDLE* Handle, IN EFI_GUID* Protocol, IN EFI_INTERFACE_TYPE InterfaceType, IN VOID* Interface);
typedef EFI_STATUS(EFIAPI* EFI_REINSTALL_PROTOCOL_INTERFACE)(INOUT EFI_HANDLE* Handle, IN EFI_GUID* Protocol, IN VOID* OldInterface, IN VOID* NewInterface);
typedef EFI_STATUS(EFIAPI* EFI_UNINSTALL_PROTOCOL_INTERFACE)(INOUT EFI_HANDLE* Handle, IN EFI_GUID* Protocol, IN VOID* Interface);
typedef EFI_STATUS(EFIAPI* EFI_HANDLE_PROTOCOL)(IN EFI_HANDLE Handle, IN EFI_GUID* Protocol, OUT VOID** Interface);
typedef EFI_STATUS(EFIAPI* EFI_REGISTER_PROTOCOL_NOTIFY)(IN EFI_GUID* Protocol, IN EFI_EVENT Event, OUT VOID** Registration);
typedef EFI_STATUS(EFIAPI* EFI_LOCATE_HANDLE)(IN EFI_LOCATE_SEARCH_TYPE SearchType, INOPT EFI_GUID* Protocol, INOPT VOID* SearchKey, INOUT UINTN* BufferSize, OUT EFI_HANDLE* Buffer);
typedef EFI_STATUS(EFIAPI* EFI_LOCATE_DEVICE_PATH)(IN EFI_GUID* Protocol, INOUT EFI_DEVICE_PATH_PROTOCOL** DevicePath, OUT EFI_HANDLE* Device);
typedef EFI_STATUS(EFIAPI* EFI_INSTALL_CONFIGURATION_TABLE)(IN EFI_GUID* Guid, IN VOID* Table);
typedef EFI_STATUS(EFIAPI* EFI_IMAGE_LOAD)(IN BOOLEAN BootPolicy, IN EFI_HANDLE ParentImageHandle, IN EFI_DEVICE_PATH_PROTOCOL* DevicePath, INOPT VOID* SourceBuffer, IN UINTN SourceSize, OUT EFI_HANDLE* ImageHandle);
typedef EFI_STATUS(EFIAPI* EFI_IMAGE_START)(IN EFI_HANDLE ImageHandle, OUT UINTN* ExitDataSize, OUT CHAR16** ExitData OPTIONAL);
typedef EFI_STATUS(EFIAPI* EFI_LOCATE_PROTOCOL)(IN EFI_GUID* Protocol, INOPT VOID* Registration, OUT VOID** Interface);
typedef EFI_STATUS(EFIAPI* EFI_OPEN_PROTOCOL)(IN EFI_HANDLE Handle, IN EFI_GUID* Protocol, OUT VOID** Interface OPTIONAL, IN EFI_HANDLE AgentHandle, IN EFI_HANDLE ControllerHandle, IN UINT32 Attributes);
typedef EFI_STATUS(EFIAPI* EFI_CLOSE_PROTOCOL)(IN EFI_HANDLE Handle, IN EFI_GUID* Protocol, IN EFI_HANDLE AgentHandle, IN EFI_HANDLE ControllerHandle);
typedef EFI_STATUS(EFIAPI* EFI_OPEN_PROTOCOL_INFORMATION)(IN EFI_HANDLE Handle, IN EFI_GUID* Protocol, OUT EFI_OPEN_PROTOCOL_INFORMATION_ENTRY** EntryBuffer, OUT UINTN* EntryCount);
typedef EFI_STATUS(EFIAPI* EFI_EXIT)(IN EFI_HANDLE ImageHandle, IN EFI_STATUS ExitStatus, IN UINTN ExitDataSize, INOPT CHAR16* ExitData);
typedef EFI_STATUS(EFIAPI* EFI_IMAGE_UNLOAD)(IN EFI_HANDLE ImageHandle);
typedef EFI_STATUS(EFIAPI* EFI_EXIT_BOOT_SERVICES)(IN EFI_HANDLE ImageHandle, IN UINTN MapKey);
typedef EFI_STATUS(EFIAPI* EFI_GET_NEXT_MONOTONIC_COUNT)(OUT UINT64* Count);
typedef EFI_STATUS(EFIAPI* EFI_STALL)(IN UINTN Microseconds);
typedef EFI_STATUS(EFIAPI* EFI_SET_WATCHDOG_TIMER)(IN UINTN Timeout, IN UINT64 WatchdogCode, IN UINTN DataSize, INOPT CHAR16* WatchdogData);
typedef EFI_STATUS(EFIAPI* EFI_CONNECT_CONTROLLER)(IN EFI_HANDLE ControllerHandle, INOPT EFI_HANDLE* DriverImageHandle, INOPT EFI_DEVICE_PATH_PROTOCOL* RemainingDevicePath, IN BOOLEAN Recursive);
typedef EFI_STATUS(EFIAPI* EFI_DISCONNECT_CONTROLLER)(IN EFI_HANDLE ControllerHandle, INOPT EFI_HANDLE DriverImageHandle, INOPT EFI_HANDLE ChildHandle);
typedef EFI_STATUS(EFIAPI* EFI_PROTOCOLS_PER_HANDLE)(IN EFI_HANDLE Handle, OUT EFI_GUID*** ProtocolBuffer, OUT UINTN* ProtocolBufferCount);
typedef EFI_STATUS(EFIAPI* EFI_LOCATE_HANDLE_BUFFER)(IN EFI_LOCATE_SEARCH_TYPE SearchType, INOPT EFI_GUID* Protocol, INOPT VOID* SearchKey, INOUT UINTN* NoHandles, OUT EFI_HANDLE** Buffer);
typedef EFI_STATUS(EFIAPI* EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES)(INOUT EFI_HANDLE* Handle, ...);
typedef EFI_STATUS(EFIAPI* EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES)(IN EFI_HANDLE* Handle, ...);
typedef EFI_STATUS(EFIAPI* EFI_CALCULATE_CRC32)(IN VOID* Data, IN UINTN DataSize, OUT UINT32* Crc32);
typedef VOID(EFIAPI* EFI_COPY_MEM)(IN VOID* Destination, IN VOID* Source, IN UINTN Length);
typedef VOID(EFIAPI* EFI_SET_MEM)(IN VOID* Buffer, IN UINTN Size, IN UINT8 Value);
typedef EFI_STATUS(EFIAPI* EFI_CREATE_EVENT_EX)(UINT32 Type, EFI_TPL NotifyTpl, EFI_EVENT_NOTIFY NotifyFunction, CONST VOID* NotifyContext, CONST EFI_GUID* EventGuid, EFI_EVENT* Event);



#endif
