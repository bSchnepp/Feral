/*
Copyright (c) 2019, 2020, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute, execute,
and transmit the Software, and to prepare derivative works of the Software,
and to permit third-parties to whom the Software is furnished to do so, all
subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer, must
be included in all copies of the Software, in whole or in part, and all
derivative works of the Software, unless such copies or derivative works are
solely in the form of machine-executable object code generated by a source
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
 */

#include <feral/stdtypes.h>
#include <feral/feralstatus.h>

#ifndef _FERAL_X86_64_PAGE_FLAGS_H_
#define _FERAL_X86_64_PAGE_FLAGS_H_

#define KERN_VIRT_OFFSET (0xFFFFFF8000000000)
#define KERN_VIRT_TO_PHYS(x) ((x - KERN_VIRT_OFFSET))
#define KERN_PHYS_TO_VIRT(x) ((x + KERN_VIRT_OFFSET))
#define KERN_IS_VIRT ((x & KERN_VIRT_OFFSET) == KERN_VIRT_OFFSET)

#define X86_PAGE_FLAG_PRESENT (1U << 0)
#define X86_PAGE_FLAG_WRITABLE (1U << 1)
#define X86_PAGE_FLAG_USER_READ (1U << 2)
#define X86_PAGE_FLAG_WRITE_PAST_CACHE (1U << 3)
#define X86_PAGE_FLAG_CACHE_DISABLED (1U << 4)

#define X86_PAGE_ACCESSED_FLAG (1U << 5)
#define X86_PAGE_DIRTY (1U << 6)

#define X86_PAGE_HUGE (1U << 7)
/* If PGE bit of CR4 is set, then we can use this for global pages. */
#define X86_PAGE_GLOBAL (1U << 8)

/* Each entry is 9 bits long. */
#define X86_PAGE_LEVEL_BITMASK (0x1FF)

/* We can use bits 9 through 11 for whatever we want? */

#define X86_PAGE_NO_EXECUTE (1U << 63)

#if defined(__i386__)
#define PAGE_ALIGN(x) (x & 0xFFFFF000)
#elif defined(__x86_64__)
#define PAGE_ALIGN(x) (x & 0xFFFFFFFFFFFFF000)
#endif

/* Helper to make things easier. */
#define X86_PRESENT_WRITABLE_PAGE \
	(X86_PAGE_FLAG_PRESENT | X86_PAGE_FLAG_WRITABLE)
#define X86_PRESENT_PAGE_NO_EXEC (X86_PAGE_FLAG_PRESENT | X86_PAGE_NO_EXECUTE)

#define X86_PRESENT_WRITABLE_PAGE_USER \
	(X86_PRESENT_WRITABLE_PAGE | (X86_PAGE_FLAG_USER_READ))

/* will replace PageMapEntry at some point */
typedef struct PageMapEntry
{
	union {
		struct
		{
			UINT64 Present : 1;
			UINT64 Writable : 1;
			UINT64 UserAccessible : 1;
			UINT64 WriteThrough : 1;
			UINT64 NoCache : 1;
			UINT64 Accessed : 1;
			UINT64 Dirty : 1;
			UINT64 Huge : 1;
			UINT64 Global : 1;
			UINT64 Unused : 3;
			UINT64 Address : 51;
			UINT64 NoExecute : 1;
		} PACKED;
		UINT64 Raw;
	} PACKED;
} PACKED PageMapEntry;

FERALSTATUS x86FindPageLevels(UINT64 Address, IN OUT UINT16 *Levels);
VOID FlushTLB(VOID);

#endif
