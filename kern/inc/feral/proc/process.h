/*
Copyright (c) 2018, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */

// This stuff is *far* beyond where we currently are at (1 Jan 2018), but hey, why not leave this in for later?
// Now that there's an architecture to work towards, it can be filled in appropriately...

#include <feral/stdtypes.h>
#include <feral/feralstatus.h>
#include <feral/port/ports.h>

#if defined(__cplusplus)
extern "C" {
#endif


#if defined(__x86_64__) || defined(__i386__)
typedef struct REGISTERS
{
	UINTN AX;	// R0
	UINTN BX;	// R3
	UINTN CX;	// R1
	UINTN DX;	// R2

	UINTN SI;	// R6
	UINTN DI;	// R7

	UINTN SP;	// R4
	UINTN BP;	// R5

	UINTN FLAGS;
	UINTN IP;
	// TODO...
#if defined(__x86_64__)
	// These registers were added in x86_64.
	UINTN R8;
	UINTN R9;
	UINTN R10;
	UINTN R11;
	UINTN R12;
	UINTN R13;
	UINTN R14;
	UINTN R15;
#endif
}ProcRegisters;

#elif defined(__aarch64__) || defined(__arm__)
// TODO: Aarch64 registers table.
typedef struct REGISTERS
{
	UINTN R1;
	UINTN R2;	//As far as I'm aware, they follow this naming convention, but do weird things with some of them (one of them is always zero or something?)
#if defined(__aarch64__)

#endif
}ProcRegisters;
#endif



// This is an OS-level structure, you shouldn't include this and use <feral.h>
// and FrlCreateProcess(), FrlCloneProcess(), etc. instead.
// TODO: Because time is evil, change this to being an opaque struct. (we use FERALTIMEHARD, and this has the year 65536 problem.)
// (we also can't eat all the RAM in the world just to solve a problem that probably won't matter, is anyone going to still be using Feral over 60000 years from now?)
typedef struct _FeralProcess
{
	// We use an 8-bit value to represent two fields for process priority.
	// The first is for while running, the second is for while halting.
	// In essence, we have two schedulers, one for processes scheduled to run,
	// and one for processes waiting to run.

	UINT16 RunningPriority;
	UINT16 HaltedPriority;

	// What time to run next?
	FERALTIMEHARD NextRunTime;
	
	// When we have RunPriority=255 and WaitPriority=255, we are intending to run
	// with a real-time design, but not guaranteeing anything (no big long math proof)
	// (something like RTLinux, we're hard real time in practice, but it's not formally verified)

	// The higher of the number, the higher the priority. Importantly, we only boost priorities, never lower.

	ProcRegisters Registers;

	VOID* Stack;
	UINT64 ProcID;
	
	PFERALPORT Port;
}FeralProcess;


FERALSTATUS KeCreateProcess(INOUT FERALPORT* HPort, IN UINT16 RunPriority, IN UINT16 HaltPriority, IN FERALTIMEHARD RunTime, OUT struct _FeralProcess* Process);
FERALSTATUS KeTerminateProcess(INOUT struct _FeralProcess* Process, IN FERALTIMEHARD EndTime);

#if defined(__cplusplus)
}
#endif
