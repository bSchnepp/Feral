/*
Copyright (c) 2019, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */

#include <feral/stdtypes.h> 
 
#ifndef _FERAL_KERN_FERAL_MM_PAGE_H_
#define _FERAL_KERN_FERAL_MM_PAGE_H_

typedef struct MmPage
{
	UINTN PageIndex;
	UINT_PTR PageSize;
	UINT32 Flags;
	struct MmPage* NextPage;
}MmPage;

typedef enum MmFrameType
{
	/* We don't expect to deallocate this frame for a *very* long time. */
	FRAME_TYPE_STATIC = 0,
	
	/* This may be variable size and asked to reallocate later */
	FRAME_TYPE_DYNAMIC,
	
	/* This is small and expected to deallocate soon. */
	FRAME_TYPE_CACHE,
}MmFrameType;


#define MM_PAGE_FLAG_END_OF_MEMORY	(1 << 1)

/* 
	This is 3 bits intentionally: it's to avoid a Rowhammer attack causing a single bit to be flipped and an attacker
	able to overwrite a section of memory of something important. (Flipping 3 bits to cause a page in used to be mistakenly labed as free
	is *much* harder than a single bit. ECC memory doesn't protect us against 3 bits, only 2, but this should be sufficient.)
*/
#define MM_PAGE_FLAG_FREE				(5 << 2)

#define MM_PAGE_FLAG_READONLY			(1 << 6)

/* For similar reasons, these are separate flags. If > 1 are set, we better do something. */
#define MM_PAGE_FLAG_KERNEL_LEVEL			(1 << 7)
#define MM_PAGE_FLAG_INTERMEDIATE_LEVEL	(1 << 8)
#define MM_PAGE_FLAG_USER_LEVEL				(1 << 9)



/* Ha. ha.... ha. See what I did there? */
#define MM_PAGE_ALLOCATOR_NAME	"RAMPAGE"


typedef struct
{
	/* When we go over a certain threshold for RAM usage, how often do we dump pages to swap? */
	UINT8 Swappiness;
	
	/* How many pages are we currently using? */
	UINT64 NumPages;
	
	/* How much memory can we use total? */
	UINT64 TotalPhysicalMemory;
	
	/* What pages are already in use? */
	MmPage *RootPage;
	
	/* The last page we allocated (in distance from 0, not the last one used.) */
	MmPage *FurthestPage;
	
}MmManagerContext;


/* 	For now, we'll use a **really** simple linked list
	allocator. This needs to be purged from the kernel 
	once we get more complex, but for now, it works.
	
	Essentially, it's bad because it doesn't segment
	areas off based upon purpose, doesn't handle
	scaling all that well, etc.
	
	It also doesn't implement out segmenting of
	physical memory off, which we need to make it
	harder to take advantage of potential exploits in
	the kernel.
*/


/**
	Gets the containing page of a given address.
	@param Address The address to find the page descriptor for
	@param Page A reference to the page belonging to that address.
	
	@return The status of the kernel after this operation.
 */
FERALSTATUS MmGetContainingFrame(IN UINT_PTR Address, OUT MmPage *Page);

/**
	Allocates a given page with given size and at the requested address.
	If there is no lower bound, set it to 0.
	If there is no upper bound, set it to 0.
	
	ActualAddress will be set to the actual location in memory where
	the needed space was allocated.
 */
FERALSTATUS MmAllocateMemory(IN UINT_PTR RequestedAddress, UINTN Size, INOPT UINT_PTR LowerBound, INOPT UINT_PTR UpperBound, OUT UINT_PTR *ActualAddress);

/**
	Allocates a given page with given size and at the requested address.
	If the specific address with the specific size cannot be allocated,
	then an error status is returned.
	
	SpecificAddress will be set to the actual location in memory where
	the needed space was allocated.
 */
FERALSTATUS MmAllocateSpecificMemory(INOUT UINT_PTR SpecificAddress, UINTN Size);


/**
	Allocates a number of frames.
 */
FERALSTATUS MmAllocateFrames(IN UINTN Amount, OUT UINTN *Address);

/**
	Marks a given page as empty.
	@param AddressLocation The location to free
	@param Size The amount to free
	
	@return The status of the kernel at this given time.
 */
FERALSTATUS MmDeallocateMemory(IN UINT_PTR AddressLocation, UINTN Size);


#endif
