/*
Copyright (c) 2018, 2019, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */

#include <feral/stdtypes.h>
#include <feral/feralstatus.h>

#include <mm/heap.h>
#include <mm/mmcommon.h>

#ifndef _FERAL_KERN_MM_H_
#define _FERAL_KERN_MM_H_

typedef enum MmStructureType
{
	MM_STRUCTURE_TYPE_MANAGEMENT_CREATE_INFO = 0,

	MM_STRUCTURE_TYPE_PHYSICAL_ALLOCATION_INFO,
	MM_STRUCTURE_TYPE_PHYSICAL_FRAME_ALLOCATOR,
	MM_STRUCTURE_TYPE_PHYSICAL_FRAME_BLOCK,

	MM_STRUCTURE_TYPE_VIRTUAL_ALLOCATION_INFO,
	MM_STRUCTURE_TYPE_VIRTUAL_FRAME_ALLOCATOR,
	MM_STRUCTURE_TYPE_VIRTUAL_FRAME_BLOCK,

	MM_STRUCTURE_TYPE_HEAP_ALLOCATION_INFO,
	MM_STRUCTURE_TYPE_HEAP_ALLOCATOR,

	MM_STRUCTURE_TYPE_FREE_AREA_RANGE,
	MM_STRUCTURE_TYPE_USED_AREA_RANGE,
	MM_STRUCTURE_TYPE_OTHER_AREA_RANGE,

	MM_STRUCTURE_TYPE_MAX = 0xFFFF
} MmStructureType;

typedef struct MmFreeAreaRange
{
	MmStructureType sType;
	void *pNext;

	UINT_PTR Start;
	UINT_PTR End;
	UINT_PTR Size; /* Not *actually* a pointer, but matches addr size. */
} MmFreeAreaRange;


typedef struct MmPhysicalAllocationInfo
{
	MmStructureType sType;
	void *pNext;

	UINT64 FrameSize; /*Expect 4096 for now. Possibly use 2MB pages?*/
	UINT64 FreeAreaRangeCount;
	MmFreeAreaRange *Ranges;
} MmPhysicalAllocationInfo;


typedef struct MmCreateInfo
{
	MmStructureType sType;
	void *pNext;

	MmPhysicalAllocationInfo *pPhysicalAllocationInfo;
	/* TODO on the rest of this. For now, it gets to be identity mapped! */


} MmCreateInfo;

typedef struct AllocatorState
{
	MmStructureType sType;
	void *pNext;

	UINT64 NumArenas;
	Arena *Arenas;
} AllocatorState;


/* (Obviously, these are TODO.) FIXME: Prefix with 'Mm'. */

FERALSTATUS KiInitializeMemMgr(IN MmCreateInfo *info); /* TODO!!! */

FERALSTATUS GetMemoryAlreadyInUse(IN UINT_PTR Location, OUT BOOL *Status);
FERALSTATUS SetMemoryAlreadyInUse(IN UINT_PTR Location, IN BOOL Status);

FERALSTATUS ExtractAddressFromPageEntry(IN PageMapEntry *Entry,
	OUT UINT_PTR *Address);



AllocatorState *MmCreateAllocatorState(UINT64 NumArenas, VOID *HeapArea,
	UINT_PTR HeapSize);

void *MmKernelMalloc(UINT64 Size);

void MmKernelFree(UINT_PTR Location);

#endif
