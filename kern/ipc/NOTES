We *always* use full duplex **named pipes**.
Other systems using Feral can access these pipes if the appropriate permissions are set.

For local pipes (ie, what is trying to be done as a pipe between ordinary processes temporarilly), we just create a named pipe with the current time epoch and the hash of something about the program.

Named pipes exist for either:
	- Until the timeout is reached (a time unit defined in the kernel, which is assigned to the named pipe)
	- Until no more handles reference it (the usual (default) case)
	


To prevent writing to a read-only pipe, we just deny write access permissions. This is for flexibility, so the owning process can open up writing later, for example.

It's really just a special flavor of port.


Pipes are created as follows:
	- Some subsystem or 'native API' program calls KeCreatePipe()
		- This pipe is located in the \\. namespace, under the 'ports' directory.
		- (KeCreatePipe("RenderServer", PORT_READ_WRITE, 2746) creates a new port in \\./ports/RenderServer/)

We don't insist on *everything is strictly a file*. Instead, we expose various types and whatnot, as such, a "CreateFile" to something like SYS$CONOUT is invalid.
Rather, some layer which wants to make everything a file needs logic to handle that sort of thing. Not everything is a file.
