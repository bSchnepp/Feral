/*
Copyright (c) 2019, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */
 
 
#ifndef _FERAL_PROCESS_H_
#define _FERAL_PROCESS_H_
 
 #include <feral/stdtypes.h>
 
 /* 	By default, Feral allocates an **empty** process (nothing is linked in).
 	We expect the process driver (elf, maco, pe, etc.) to associate it
 	with an appropriate emulation layer (elf-waypoint, pe-reactos, etc.)
 	The appropriate libos is linked into the process, and should proceed as
 	if it was "native"--
 	
 	Feral **immediately** diverts all system calls into the appropriate emulation
 	layer (ie, WINE on FERAL), unless the program registers itself as part of a **native**
 	subsystem, which should only be true for things like phone or mcp. This way, the system calls
 	are processed by the libos to do the appropriate Feral thing and return results back to
 	the appropriate process as though it were a different OS.
   */


typedef struct PcProcessEntry
{
	
}PcProcessEntry;
 
#endif
