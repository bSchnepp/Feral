CMAKE_MINIMUM_REQUIRED(VERSION 3.10 FATAL_ERROR)

SET(CMAKE_C_STANDARD 11)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

SET(CMAKE_INSTALL_MESSAGE NEVER)

# Help define kern_ver.h
SET(FERAL_VERSION_MAJOR 0)
SET(FERAL_VERSION_MINOR 0)
SET(FERAL_VERSION_PATCH 1)

CONFIGURE_FILE(
	"${CMAKE_SOURCE_DIR}/kern/inc/kern_ver.h.in"
	"${CMAKE_BINARY_DIR}/kern_ver.h"
	@ONLY)

PROJECT(FERALKER C ASM_NASM)

INCLUDE_DIRECTORIES(inc)
INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})
# Maybe this will help us organize private headers better...
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

# Let's wait a while for fixing EFI support...
OPTION(FERAL_BUILD_STANDALONE_UEFI_ "Enable UEFI build" OFF)

ADD_SUBDIRECTORY(drivers)
ADD_SUBDIRECTORY(kern)
ADD_SUBDIRECTORY(sec)
ADD_SUBDIRECTORY(tests)

ADD_EXECUTABLE(FERALKER
	$<TARGET_OBJECTS:Security>)
	
TARGET_LINK_LIBRARIES(FERALKER Drivers)
TARGET_LINK_LIBRARIES(FERALKER Kernel)
	
SET_TARGET_PROPERTIES(FERALKER PROPERTIES LINK_DEPENDS ${LINKER_SCRIPT})


# We should possibly be more careful what we strip instead of just
# stripping everything.
IF (CMAKE_BUILD_TYPE STREQUAL Release)
    ADD_CUSTOM_COMMAND(TARGET ${CMAKE_PROJECT_NAME} POST_BUILD
            COMMAND ${CMAKE_STRIP} ${CMAKE_PROJECT_NAME})
ENDIF()
