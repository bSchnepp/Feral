/*
Copyright (c) 2018, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */

// Defines the global color state.
#ifndef _FERAL_DRIVERS_CHROMATIC_
#define _FERAL_DRIVERS_CHROMATIC_

#include <feral/stdtypes.h>

// RGB for the various peripherals: specific drivers interpret this color accordingly.
typedef struct RGBState
{
	UINT8 Red;
	UINT8 Green;
	UINT8 Blue;
} RGBState;

// We may have some rules set up elsewhere, or the device itself supports it.
// If unsupported, we throw the colors at the device and emulate it in software!
#define RGB_COLORS_STATIC (0 << 0)// The color stays the same.
#define RGB_COLORS_BLINKING (1 << 0)// It blinks. Just as the name says. Stays the color for a bit. Turns off. Repeat.
#define RGB_COLORS_PULSING (1 << 1)// It gently goes into the color, then goes off the color.
#define RGB_COLORS_SPECTRUM (1 << 2)// SHOW ALL THE RGB GLORY!


#define LED_STATE_OFF (0x00)
#define LED_STATE_ON (0x01)


/* We will remap these to specific devices if needed: for now, follow what the hardware I have happens to be. */
/* I have a 1532:0053 and a 1532:010f, both are from the same vendor (obviously), and share a lot of hardware details in regards to RGB stuff.*/
#define LED_SCROLL_WHEEL (0x01)
#define LED_UNKNOWN_PART (0x02)
#define LED_BATTERY_LED (0x03)
#define LED_LOGO (0x04)
#define LED_BACKLIGHT (0x05)
#define LED_UNKNOWN_PART_2 (0x06)
#define LED_GAME_INTEGRATION (0x07)

/* Generic 'red', 'blue', 'green' mapped to 12, 13, and 14 (0xC, 0xD, 0xE) */

typedef UINT8 LEDSTATUS;

/* LED error codes, like FERALSTATUS. */
#define LED_ERROR_CODE_BUSY (0x01)
#define LED_ERROR_CODE_SUCCESS (0x02)
#define LED_ERROR_CODE_FAILED (0x03)
#define LED_ERROR_CODE_TIMED_OUT (0x04)
#define LED_ERROR_CODE_UNSUPPORTED (0x05)

#endif
