/*
Copyright (c) 2019, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute, execute,
and transmit the Software, and to prepare derivative works of the Software,
and to permit third-parties to whom the Software is furnished to do so, all
subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer, must
be included in all copies of the Software, in whole or in part, and all
derivative works of the Software, unless such copies or derivative works are
solely in the form of machine-executable object code generated by a source
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
 */

#ifndef _FERAL_HYDROGEN_H_
#define _FERAL_HYDROGEN_H_

/*
	We're not stupid: don't let 0 be maximum access (There are *many*
	ways to set things to 0, but much fewer to set things to some
	very specific value, or it takes more time. Even if we can't
	hold security that long, if we can stall an attacker for another 2-3
	seconds to look in memory for a value to memcpy()... enough time to
	rip power coords out and ethernet cables?)

	Security server's purpose is to prevent exploitation *after* we've been
	compromised, and to add some layers of security beforehand
	to try and avoid privilege escalation.
 */


/* _MUST_ be castable to UINT8 for proofs and stuff. */
typedef enum SecurityClearanceLevel
{
	SECURITY_LEVEL_UNTRUSTED = 0,
	SECURITY_LEVEL_LOW_TRUST = 1,
	SECURITY_LEVEL_MED_TRUST = 3,
	SECURITY_LEVEL_HIGH_TRUST = 7,
	SECURITY_LEVEL_SUPERVISOR = 15,
	SECURITY_LEVEL_MANAGER = 31,
	SECURITY_LEVEL_ADMINISTRATOR = 63,
	/* We have 2 more bits left. What to do with them? */
} SecurityClearanceLevel;

typedef enum SecurityClassStructureType
{
	SECURITY_CLASS_STRUCTURE_TYPE_INVALID = 0,

	SECURITY_CLASS_STRUCTURE_TYPE_SECURITY_SERVER = 1,
	SECURITY_CLASS_STRUCTURE_TYPE_PROCESS = 2,
	SECURITY_CLASS_STRUCTURE_TYPE_SYSTEM = 3,

	SECURITY_CLASS_STRUCTURE_TYPE_FILESYSTEM = (4 | 1 << 63),
	SECURITY_CLASS_STRUCTURE_TYPE_FILE = (5 | 1 << 63),
	SECURITY_CLASS_STRUCTURE_TYPE_DIRECTORY = (6 | 1 << 63),
	SECURITY_CLASS_STRUCTURE_TYPE_FILE_DESCRIPTOR = (7 | 1 << 63),
	SECURITY_CLASS_STRUCTURE_TYPE_SYM_LINK = (8 | 1 << 63),
	SECURITY_CLASS_STRUCTURE_TYPE_CHR_FILE = (9 | 1 << 63),
	SECURITY_CLASS_STRUCTURE_TYPE_BLK_FILE = (10 | 1 << 63),
	SECURITY_CLASS_STRUCTURE_TYPE_SOCK_FILE = (11 | 1 << 63),
	SECURITY_CLASS_STRUCTURE_TYPE_FIFO_PIPE = (12 | 1 << 63),
	SECURITY_CLASS_STRUCTURE_TYPE_PIPE = (13 | 1 << 63),

	SECURITY_CLASS_STRUCTURE_TYPE_SOCKET = (14 | 1 << 62),
	SECURITY_CLASS_STRUCTURE_TYPE_TCP_SOCKET = (15 | 1 << 62),
	SECURITY_CLASS_STRUCTURE_TYPE_UDP_SOCKET = (16 | 1 << 62),
	SECURITY_CLASS_STRUCTURE_TYPE_IP_SOCKET = (17 | 1 << 62),
	SECURITY_CLASS_STRUCTURE_TYPE_NODE = (18 | 1 << 62),
	SECURITY_CLASS_STRUCTURE_TYPE_NETWORK_INTERFACE = (19 | 1 << 62),
	SECURITY_CLASS_STRUCTURE_TYPE_NETWORK_LINK = (20 | 1 << 62),
	SECURITY_CLASS_STRUCTURE_TYPE_PACKET_SOCKET = (21 | 1 << 62),

	/* TODO  */

} SecurityClassStructureType;

/*
	object oriented c is fun: all structs need to implement this,
	and then other stuff.
 */
typedef struct SecurityClassCommon
{
	SecurityClassStructureType sType;
	const void* pNext;

}

BOOL CheckSecurityClearance(
	SecurityClearanceLevel userHas, SecurityClearanceLevel wanted);

#endif
