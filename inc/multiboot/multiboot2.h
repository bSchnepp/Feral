/*
Copyright (c) 2018, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */
 
#ifndef _MULTIBOOT_MULTIBOOT_2_H_
#define _MULTIBOOT_MULTIBOOT_2_H_

#include <feral/stdtypes.h>

/* 
	Aim for compatibility with the GNU implementation 
	(MIT license is too strict for inclusion in Feral kernel, 
	and lots of resources out there rely on GNU stuff) 
	
	(we're ok with gluing the freebsd network stack in FERAL
	because do we *really* want to write drivers to support hundreds
	of network cards? We'll get around to jettisoning it after integrating,
	but that's a long way out.)
	
	
	TODO: figure out how to go purge VLAs here 
	(VLAs are bad!!!), without breaking the multiboot spec.
	
	(it also makes clang go do a big frowny face, and we trust clang)
 */


#define MULTIBOOT_TAG_TYPE_END 											(0x00)
#define MULTIBOOT_TAG_TYPE_CMD_LINE 									(0x01)
#define MULTIBOOT_TAG_TYPE_BOOT_LOADER 								(0x02)
#define MULTIBOOT_TAG_TYPE_MODULE_TAG								(0x03)
#define MULTIBOOT_TAG_TYPE_INITIAL_MEMORY_INFO						(0x04)
#define MULTIBOOT_TAG_TYPE_BOOT_DEVICE								(0x05)
#define MULTIBOOT_TAG_TYPE_MEM_MAP									(0x06)
#define MULTIBOOT_TAG_TYPE_VBE_INFO										(0x07)
#define MULTIBOOT_TAG_TYPE_FRAME_BUFFER								(0x08)
#define MULTIBOOT_TAG_TYPE_ELF_SECTIONS								(0x09)
#define MULTIBOOT_TAG_TYPE_APM											(0x0A)
#define MULTIBOOT_TAG_TYPE_UEFI_32										(0x0B)
#define MULTIBOOT_TAG_TYPE_UEFI_64										(0x0C)
#define MULTIBOOT_TAG_TYPE_SMBIOS										(0x0D)
#define MULTIBOOT_TAG_TYPE_ACPI_LEGACY									(0x0E)
#define MULTIBOOT_TAG_TYPE_ACPI											(0x0F)
#define MULTIBOOT_TAG_TYPE_NETWORK									(0x10)
#define MULTIBOOT_TAG_TYPE_UEFI_MMAP									(0x11)
#define MULTIBOOT_TAG_TYPE_UEFI_BOOT_SERVICES							(0x12)
#define MULTIBOOT_TAG_TYPE_UEFI_IMAGE_HANDLE_32						(0x13)
#define MULTIBOOT_TAG_TYPE_UEFI_IMAGE_HANDLE_64						(0x14)
#define MULTIBOOT_TAG_TYPE_LOAD_BASE_ADDRESS							(0x15)
/* TODO */


#define MULTIBOOT_ALIGNMENT												(0x08)
#define MULTIBOOT_BOOTLOADER_MAGIC_NUMBER							(0xE85250D6)


#define		MULTIBOOT_BASE_HEADER_TAG_BASE_VALUES			\
				UINT16	type;										\
				UINT16	flags;										\
				UINT32	size

typedef struct multiboot_header
{
	UINT32	magic;
	UINT32	architecture;
	UINT32	header_length;
	UINT32	checksum;
}multiboot_header;

typedef struct multiboot_header_tag
{
	MULTIBOOT_BASE_HEADER_TAG_BASE_VALUES;
}multiboot_header_tag;

typedef struct multiboot_header_tag_information_request
{
	MULTIBOOT_BASE_HEADER_TAG_BASE_VALUES;
	UINT32	requests[0];
}multiboot_header_tag_information_request;

typedef struct multiboot_header_tag_address
{
	MULTIBOOT_BASE_HEADER_TAG_BASE_VALUES;
	UINT32	header_addr;
	UINT32	load_addr;
	UINT32	load_end_addr;
	UINT32	bss_end_addr;
}multiboot_header_tag_address;

typedef struct multiboot_header_tag_entry_address
{
	MULTIBOOT_BASE_HEADER_TAG_BASE_VALUES;
	UINT32	entry_addr;
}multiboot_header_tag_entry_address;

typedef struct multiboot_header_tag_console_flags
{
	MULTIBOOT_BASE_HEADER_TAG_BASE_VALUES;
	UINT32	console_flags;
}multiboot_header_tag_console_flags;

typedef struct multiboot_header_tag_framebuffer
{
	MULTIBOOT_BASE_HEADER_TAG_BASE_VALUES;
	UINT32	width;
	UINT32	height;
	UINT32	depth;
}multiboot_header_tag_framebuffer;

typedef struct multiboot_header_tag_module_align
{
	MULTIBOOT_BASE_HEADER_TAG_BASE_VALUES;
	UINT32	width;
	UINT32	height;
	UINT32	depth;
}multiboot_header_tag_module_align;

typedef struct multiboot_color
{
	UINT8	red;
	UINT8	green;
	UINT8	blue;
}multiboot_color;

#define	MULTIBOOT_MEMORY_AVAILABLE							(1 << 1)
#define	MULTIBOOT_MEMORY_RESERVED							(1 << 2)
#define	MULTIBOOT_MEMORY_ACPI_RECLAIMABLE					((1 << 2) | (1 << 1))
#define	MULTIBOOT_MEMORY_NVS								(1 << 3)
#define	MULTIBOOT_MEMORY_BADRAM							((1 << 3) | (1 << 1))

typedef struct multiboot_mmap_entry
{
		UINT64	addr;
		UINT64	len;
		UINT32	type;
		UINT32	zero;
}multiboot_mmap_entry;

typedef multiboot_mmap_entry multiboot_memory_map_t;

#define MULTIBOOT_BASE_TAG_BASE_VALUES					\
			UINT32	type;									\
			UINT32	size
			
typedef struct multiboot_tag
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
}multiboot_tag;

typedef struct multiboot_tag_string
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	CHAR string[0];
}multiboot_tag_string;

typedef struct multiboot_tag_module
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT32	mod_start;
	UINT32	mod_end;
	CHAR cmdline[0];
}multiboot_tag_module;

typedef struct multiboot_tag_basic_meminfo
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT32	mem_lower;
	UINT32	mem_upper;
}multiboot_tag_basic_meminfo;

typedef struct multiboot_tag_bootdev
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT32	biosdev;
	UINT32	slice;
	UINT32	part;
}multiboot_tag_bootdev;

typedef struct multiboot_tag_mmap
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT32	entry_size;
	UINT32	entry_version;
	multiboot_mmap_entry	entries[0];
}multiboot_tag_mmap;

typedef struct multiboot_vbe_info_block
{
	UINT8	external_specification[512];
}multiboot_vbe_info_block;

typedef struct multiboot_vbe_mode_info_block
{
	UINT8	external_specification[256];
}multiboot_vbe_mode_info_block;

typedef struct multiboot_tag_vbe
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT16	vbe_mode;
	UINT16	vbe_interface_seg;
	UINT16	vbe_interface_off;
	UINT16	vbe_interface_len;
	
	multiboot_vbe_info_block			vbe_control_info;
	multiboot_vbe_mode_info_block		vbe_mode_info;
}multiboot_tag_vbe;

#define	MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED		(0 << 0)
#define	MULTIBOOT_FRAMEBUFFER_TYPE_RGB			(1 << 0)
#define MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT		(1 << 1)

typedef struct multiboot_tag_framebuffer_common
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT64	framebuffer_addr;
	UINT32	framebuffer_pitch;
	UINT32	framebuffer_width;
	UINT32	framebuffer_height;
	UINT8	framebuffer_bpp;
	
	UINT8	framebuffer_type;
	UINT16	MULTIBOOT_RESERVED;	
}multiboot_tag_framebuffer_common;

typedef struct multiboot_tag_framebuffer
{
	multiboot_tag_framebuffer_common	common;
	union
	{
		struct
		{
			UINT16	framebuffer_palette_num_colors;
			multiboot_color	framebuffer_palette[0];
		};
		
		struct
		{
			UINT8	framebuffer_red_field_position;
			UINT8	framebuffer_red_mask_size;
			
			UINT8	framebuffer_green_field_position;
			UINT8	framebuffer_green_mask_size;
			
			UINT8	framebuffer_blue_field_position;
			UINT8	framebuffer_blue_mask_size;
		};
	};
}multiboot_tag_framebuffer;

typedef struct multiboot_tag_elf_sections
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT32	num;
	UINT32	entsize;
	UINT32	shndx;
	CHAR	sections[0];
}multiboot_tag_elf_sections;

typedef struct multiboot_tag_apm
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT16	version;
	UINT16	cseg;
	UINT32	offset;
	UINT16	cseg_16;
	UINT16	dseg;
	UINT16	flags;
	UINT16	cseg_len;
	UINT16	cseg_16_len;
	UINT16	dseg_len;
}multiboot_tag_apm;

typedef struct multiboot_tag_efi
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINTN	pointer;
}multiboot_tag_efi;

typedef struct multiboot_tag_efi32
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT32	pointer;
}multiboot_tag_efi32;

typedef struct multiboot_tag_efi64
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT64	pointer;
}multiboot_tag_efi64;

typedef struct multiboot_tag_smbios
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT8	major;
	UINT8	minor;
	UINT8	MULTIBOOT_RESERVED[6];
	UINT8	tables[0];
}multiboot_tag_smbios;

typedef struct multiboot_tag_acpi
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT8	rsdp[0];
}multiboot_tag_acpi;

typedef multiboot_tag_acpi multiboot_tag_old_acpi;
typedef multiboot_tag_acpi multiboot_tag_new_acpi;

typedef struct multiboot_tag_network
{
	MULTIBOOT_BASE_TAG_BASE_VALUES;
	UINT8	dhcpack[0];
}multiboot_tag_network;

#if 0
typedef struct Multiboot2Info
{
	UINT32	flags;
	
	UINT32	mem_lower;
	UINT32	mem_upper;
	
	UINT32	boot_device;
	
	UINT32	cmdline;

	UINT32	mods_count;
	UINT32	mods_addr;

	UINT16	syms;
	
	UINT32	mmap_length;
	UINT32	mmap_addr;
	
	UINT32	drives_length;
	UINT32	drives_addr;
	
	UINT32	config_table;
	
	UINT32	boot_loader_name;
	
	UINT32	apm_table;
	
	UINT32	vbe_control_info;
	UINT32	vbe_mode_info;
	UINT32	vbe_mode;
	UINT32	vbe_interface_seg;
	UINT32	vbe_interface_off;
	UINT32	vbe_interface_len;
	
	UINT16	framebuffer_addr;
	UINT64	framebuffer_pitch;
	UINT32	framebuffer_width;
	UINT32	framebuffer_height;
	UINT32	framebuffer_bpp;
	UINT8	framebuffer_type;
	UINT8	color_info[6];
}Multiboot2Info PACKED;
#endif

#endif
