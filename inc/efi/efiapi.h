/*
Copyright (c) 2018, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */

#ifndef _FERAL_LIBRE_EFI_API_H_
#define _FERAL_LIBRE_EFI_API_H_

#include <efi/efi.h>
#include <efi/efistatus.h>

#define EFI_SYSTEM_TABLE_SIGNATURE		0x5453595320494249
#define define EFI_BOOT_SERVICES_SIGNATURE	0x56524553544f4f42

#define EFI_SYSTEM_TABLE_REVISION(major, minor) ((major<<16) | (minor))

#define EFI_2_70_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(2, 70)
#define EFI_2_60_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(2, 60)
#define EFI_2_50_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(2, 50)
#define EFI_2_40_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(2, 40)
#define EFI_2_31_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(2, 31)
#define EFI_2_30_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(2, 30)
#define EFI_2_20_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(2, 20)
#define EFI_2_10_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(2, 10)
#define EFI_2_00_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(2, 00)
#define EFI_1_10_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(1, 10)
#define EFI_1_02_SYSTEM_TABLE_REVISION EFI_SYSTEM_TABLE_REVISION(1, 02)


#define EFI_SPECIFICATION_VERSION  EFI_2_70_SYSTEM_TABLE_REVISION
#define EFI_SYSTEM_TABLE_REVISION  EFI_SPECIFICATION_VERSION
#define EFI_BOOT_SERVICES_REVISION EFI_SPECIFICATION_VERSION

#define EVT_TIMER 0x80000000
#define EVT_RUNTIME 0x40000000
#define EVT_NOTIFY_WAIT 0x00000100
#define EVT_NOTIFY_SIGNAL 0x00000200
#define EVT_SIGNAL_EXIT_BOOT_SERVICES 0x00000201
#define EVT_SIGNAL_VIRTUAL_ADDRESS_CHANGE 0x60000202

#define TPL_APPLICATION 0x04
#define TPL_CALLBACK 0x08
#define TPL_NOTIFY 0x10
#define TPL_HIGH_LEVEL 0x1F

/* EFI allocation enum. */

typedef enum EFI_ALLOCATE_TYPE
{
	AllocateAnyPages,
	AllocateMaxAddress,
	AllocateAddress,
	MaxAllocateType,
}EFI_ALLOCATE_TYPE;

typedef enum
{
	TimerCancel,
	TimerPeriodic,
	TimerRelative
}EFI_TIMER_DELAY;

typedef struct
{
	UINT64 Signature;
	UINT32 Revision;
	UINT32 HeaderSize;
	UINT32 CRC32;
	UINT32 Reserved;
}EFI_TABLE_HEADER;

typedef VOID (EFIAPI *EFI_EVENT_NOTIFY)(EFI_EVENT Event, VOID* Context);
typedef EFI_STATUS (EFIAPI *EFI_CREATE_EVENT)(UINT32 Type, EFI_TPL NotifyTpl, EFI_EVENT_NOTIFY NotifyFunction, VOID* NotifyContext, EFI_EVENT* Event);
typedef EFI_STATUS (EFIAPI *EFI_CREATE_EVENT_EX)(UINT32 Type, EFI_TPL NotifyTpl, EFI_EVENT_NOTIFY NotifyFunction, CONST VOID* NotifyContext, CONST EFI_GUID* EventGuid, EFI_EVENT* Event);
typedef EFI_STATUS (EFIAPI *EFI_CLOSE_EVENT)(EFI_EVENT Event);
typedef EFI_STATUS (EFIAPI *EFI_SIGNAL_EVENT)(EFI_EVENT Event);
typedef EFI_STATUS (EFIAPI *EFI_WAIT_FOR_EVENT)(UINTN NumberOfEvents, EFI_EVENT* Event, UINTN* Index);
typedef EFI_STATUS (EFIAPI *EFI_CHECK_EVENT)(EFI_EVENT Event);
typedef EFI_STATUS (EFIAPI *EFI_SET_TIMER)(EFI_EVENT Event, EFI_TIMER_DELAY Type, UINT64 TriggerTime);
typedef EFI_TPL (EFIAPI *EFI_RAISE_TPL)(EFI_TPL NewTpl);
typedef VOID (EFIAPI *EFI_RESTORE_TPL)(EFI_TPL OldTpl);


typedef struct
{

}EFI_SYSTEM_TABLE;

VOID InitializeLibPlatform(IN EFI_HANDLE ImageHandle, IN EFI_SYSTEM_TABLE* SystemTable);

#endif

