/*
Copyright (c) 2018, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */
 
#ifndef _FERAL_RENEGADE_PROTOCOL_H_
#define _FERAL_RENEGADE_PROTOCL_H_

/* Address space is 512 bits, or the same as IPv6 squared twice. */
/* IPv6 will eventually run out of addresses, and if we learned anything from IPv4, it's that 2^32^2^2 isn't going to be enough.	*/
/* The intent is that this number is so large that for every single planet in the observable universe can have a number of users 
     on said planet equal to the number of planets in the observable universe, and still have more than plenty left over.
     In other words, it would take a lot in order to completely exhaust all the addresses possible in RENEGADE.
*/

#include <feral/stdtypes.h>

typedef struct renegade_version_one_blockchain
{
	CHAR	CryptoNightAddress[95];
	/* TODO */
}renegade_version_one_blockchain;

typedef UINT64	BlockchainID;
typedef UINT64	BlockchainVersion;

typedef struct renegade_protocol_header
{
	UINT64				ProtocolVersion;	/* What version of the protocol are we using? */
	BlockchainID		BChain;				/* What blockchain protocol/hashing algo is in use (CryptoNight, SHA256, etc.) */
	BlockchainVersion	BChainVersion;		/* What revision of this blockchain do we trust? */
	UINT8				Address[64];		/* The address we're targetting, being 64 8-bit values. */
	UINT32				Crc32;				/* Validate the address being used above. */
}renegade_protocol_header;

#endif
